# This namespace allows you to define where the services will be installed into
# if not set then they will use the namespace of the release
# This is helpful when installing Kubeflow as a chart dependency (sub chart).
namespace: ""

defaults:
  image:
    # NOTE: Forward slash is important because a registry prefix
    # could be defined without a forward slash.
    # TODO: check if possible to verify if trailing forward slash exists...
    # registry: docker.io/kubeflownotebookswg/
    registry: docker.io
    # tag: "v1.8.0-rc.0"
    tag: "latest"
    pullPolicy: IfNotPresent
  autoscaling:
    # If autoscaling is disabled, replica count for a component is equal to minReplicas.
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

centraldashboard:
  # This enables the automatic profile creation.
  image:
    repository: kubeflownotebookswg/centraldashboard
    registryOverwrite:
    tagOverwrite:
    pullPolicyOverwrite:
  autoscaling:
    # If autoscaling is disabled, replica count for a component is equal to minReplicas.
    enabled:
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  serviceAccount:
    create: true
    name:
    annotations:
  config:
    enableRegistrationFlow: false
    logoutURL: '/authservice/logout'
    forceIFrame: true
    links:
      externalLinks:
      menuLinks:
      - type: item
        link: /jupyter/
        text: Notebooks
        icon: book
      - type: item
        link: /tensorboards/
        text: Tensorboards
        icon: assessment
      - type: item
        link: /volumes/
        text: Volumes
        icon: device:storage
      - type: item
        link: /models/
        text: Endpoints
        icon: kubeflow:models
      - type: item
        link: /katib/
        text: Experiments (AutoML)
        icon: kubeflow:katib
      - type: item
        text: Experiments (KFP)
        link: /pipeline/#/experiments
        icon: done-all
      - type: item
        link: /pipeline/#/pipelines
        text: Pipelines
        icon: kubeflow:pipeline-centered
      - type: item
        link: /pipeline/#/runs
        text: Runs
        icon: maps:directions-run
      - type: item
        link: /pipeline/#/recurringruns
        text: Recurring Runs
        icon: device:access-alarm
      - type: item
        link: /pipeline/#/artifacts
        text: Artifacts
        icon: editor:bubble-chart
      - type: item
        link: /pipeline/#/executions
        text: Executions
        icon: av:play-arrow
      quickLinks:
      - text: Upload a pipeline
        desc: Pipelines
        link: /pipeline/
      - text: View all pipeline runs
        desc: Pipelines
        link: /pipeline/#/runs
      - text: Create a new Notebook server
        desc: Notebook Servers
        # NOTE(kromanow94): it's probably not needed to add namespace here...
        # at least in multi user mode.
        # TODO(kromanow94): check if this is needed...
        # link: /jupyter/new?namespace=kubeflow
        link: /jupyter/new
      - text: View Katib Experiments
        desc: Katib
        link: /katib/
      documentationItems:
      - text: Getting Started with Kubeflow
        desc: Get your machine-learning workflow up and running on Kubeflow
        link: https://www.kubeflow.org/docs/started/getting-started/
      - text: MiniKF
        desc: A fast and easy way to deploy Kubeflow locally
        link: https://www.kubeflow.org/docs/distributions/minikf/
      - text: Microk8s for Kubeflow
        desc: Quickly get Kubeflow running locally on native hypervisors
        link: https://www.kubeflow.org/docs/distributions/microk8s/kubeflow-on-microk8s/
      - text: Kubeflow on GCP
        desc: Running Kubeflow on Kubernetes Engine and Google Cloud Platform
        link: https://www.kubeflow.org/docs/gke/
      - text: Kubeflow on AWS
        desc: Running Kubeflow on Elastic Container Service and Amazon Web Services
        link: https://www.kubeflow.org/docs/aws/
      - text: Requirements for Kubeflow
        desc: Get more detailed information about using Kubeflow and its components
        link: https://www.kubeflow.org/docs/started/requirements/

istioIntegration:
  enabled: true

auth:
  userHeaderName: kubeflow-userid
  userIdPrefix: ""


clusterDomain: cluster.local


# --- below values are the default created by helm create

# Default values for kubeflow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
